Python icosahedral basis:
v0: [0.894427, 0.000000, 0.447214]
v1: [0.276393, 0.850651, 0.447214]
v2: [-0.723607, 0.525731, 0.447214]
v3: [-0.723607, -0.525731, 0.447214]
v4: [0.276393, -0.850651, 0.447214]
v5: [0.000000, 0.000000, 1.000000]
Offsets: [0.27 0.37 0.47 0.57 0.67 0.77]
OFFSETS: [0.27 0.37 0.47 0.57 0.67 0.77]
[PY] Starting dualgrid_method
[PY] Adjusted center_point: [ 5. -5.  5.]
[PY] Created 6 construction sets
[PY] Generated 20 j_combos
[PY] Running single-threaded

[PY] Calculating intersections for js: (0, 1, 2)
[PY] First normal: [0.89442719 0.         0.4472136 ]
[PY] Other normals: [array([0.2763932 , 0.85065081, 0.4472136 ]), array([-0.7236068 ,  0.52573111,  0.4472136 ])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.89442719 0.         0.4472136 ]
[PY] self.offset: 0.27
[PY] others normals: [array([0.2763932 , 0.85065081, 0.4472136 ]), array([-0.7236068 ,  0.52573111,  0.4472136 ])]
[PY] others offsets: [0.37, 0.47]
[PY] First two intersections: [[ 4.78738354 -5.80876925  4.44537914]]
[PY] First two k_combos: [[ 6. -2. -5.]]

[PY] Calculating intersections for js: (0, 1, 3)
[PY] First normal: [0.89442719 0.         0.4472136 ]
[PY] Other normals: [array([0.2763932 , 0.85065081, 0.4472136 ]), array([-0.7236068 , -0.52573111,  0.4472136 ])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.89442719 0.         0.4472136 ]
[PY] self.offset: 0.27
[PY] others normals: [array([0.2763932 , 0.85065081, 0.4472136 ]), array([-0.7236068 , -0.52573111,  0.4472136 ])]
[PY] others offsets: [0.37, 0.57]
[PY] First two intersections: [[ 5.29123426 -5.44270027  3.43767771]]
[PY] First two k_combos: [[ 6. -2.  0.]]

[PY] Calculating intersections for js: (0, 1, 4)
[PY] First normal: [0.89442719 0.         0.4472136 ]
[PY] Other normals: [array([0.2763932 , 0.85065081, 0.4472136 ]), array([ 0.2763932 , -0.85065081,  0.4472136 ])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.89442719 0.         0.4472136 ]
[PY] self.offset: 0.27
[PY] others normals: [array([0.2763932 , 0.85065081, 0.4472136 ]), array([ 0.2763932 , -0.85065081,  0.4472136 ])]
[PY] others offsets: [0.37, 0.67]
[PY] First two intersections: [[ 5.25861046 -5.46640285  3.50292529]]
[PY] First two k_combos: [[ 6. -2.  7.]]

[PY] Calculating intersections for js: (0, 1, 5)
[PY] First normal: [0.89442719 0.         0.4472136 ]
[PY] Other normals: [array([0.2763932 , 0.85065081, 0.4472136 ]), array([0., 0., 1.])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.89442719 0.         0.4472136 ]
[PY] self.offset: 0.27
[PY] others normals: [array([0.2763932 , 0.85065081, 0.4472136 ]), array([0., 0., 1.])]
[PY] others offsets: [0.37, 0.77]
[PY] First two intersections: [[ 4.62507311 -5.92669468  4.77      ]]
[PY] First two k_combos: [[ 6. -2.  4.]]

[PY] Calculating intersections for js: (0, 2, 3)
[PY] First normal: [0.89442719 0.         0.4472136 ]
[PY] Other normals: [array([-0.7236068 ,  0.52573111,  0.4472136 ]), array([-0.7236068 , -0.52573111,  0.4472136 ])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.89442719 0.         0.4472136 ]
[PY] self.offset: 0.27
[PY] others normals: [array([-0.7236068 ,  0.52573111,  0.4472136 ]), array([-0.7236068 , -0.52573111,  0.4472136 ])]
[PY] others offsets: [0.47, 0.57]
[PY] First two intersections: [[ 5.09878041 -4.85038823  3.8225854 ]]
[PY] First two k_combos: [[ 6. -5.  0.]]

[PY] Calculating intersections for js: (0, 2, 4)
[PY] First normal: [0.89442719 0.         0.4472136 ]
[PY] Other normals: [array([-0.7236068 ,  0.52573111,  0.4472136 ]), array([ 0.2763932 , -0.85065081,  0.4472136 ])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.89442719 0.         0.4472136 ]
[PY] self.offset: 0.27
[PY] others normals: [array([-0.7236068 ,  0.52573111,  0.4472136 ]), array([ 0.2763932 , -0.85065081,  0.4472136 ])]
[PY] others offsets: [0.47, 0.67]
[PY] First two intersections: [[ 4.96737621 -5.25480877  4.0853938 ]]
[PY] First two k_combos: [[ 6. -5.  7.]]

[PY] Calculating intersections for js: (0, 2, 5)
[PY] First normal: [0.89442719 0.         0.4472136 ]
[PY] Other normals: [array([-0.7236068 ,  0.52573111,  0.4472136 ]), array([0., 0., 1.])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.89442719 0.         0.4472136 ]
[PY] self.offset: 0.27
[PY] others normals: [array([-0.7236068 ,  0.52573111,  0.4472136 ]), array([0., 0., 1.])]
[PY] others offsets: [0.47, 0.77]
[PY] First two intersections: [[ 4.62507311 -6.30830938  4.77      ]]
[PY] First two k_combos: [[ 6. -5.  4.]]

[PY] Calculating intersections for js: (0, 3, 4)
[PY] First normal: [0.89442719 0.         0.4472136 ]
[PY] Other normals: [array([-0.7236068 , -0.52573111,  0.4472136 ]), array([ 0.2763932 , -0.85065081,  0.4472136 ])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.89442719 0.         0.4472136 ]
[PY] self.offset: 0.27
[PY] others normals: [array([-0.7236068 , -0.52573111,  0.4472136 ]), array([ 0.2763932 , -0.85065081,  0.4472136 ])]
[PY] others offsets: [0.57, 0.67]
[PY] First two intersections: [[ 5.31139687 -5.50475441  3.39735248]]
[PY] First two k_combos: [[6. 0. 7.]]

[PY] Calculating intersections for js: (0, 3, 5)
[PY] First normal: [0.89442719 0.         0.4472136 ]
[PY] Other normals: [array([-0.7236068 , -0.52573111,  0.4472136 ]), array([0., 0., 1.])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.89442719 0.         0.4472136 ]
[PY] self.offset: 0.27
[PY] others normals: [array([-0.7236068 , -0.52573111,  0.4472136 ]), array([0., 0., 1.])]
[PY] others offsets: [0.57, 0.77]
[PY] First two intersections: [[ 4.62507311 -3.39246708  4.77      ]]
[PY] First two k_combos: [[6. 0. 4.]]

[PY] Calculating intersections for js: (0, 4, 5)
[PY] First normal: [0.89442719 0.         0.4472136 ]
[PY] Other normals: [array([ 0.2763932 , -0.85065081,  0.4472136 ]), array([0., 0., 1.])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.89442719 0.         0.4472136 ]
[PY] self.offset: 0.27
[PY] others normals: [array([ 0.2763932 , -0.85065081,  0.4472136 ]), array([0., 0., 1.])]
[PY] others offsets: [0.67, 0.77]
[PY] First two intersections: [[ 4.62507311 -5.00611102  4.77      ]]
[PY] First two k_combos: [[6. 7. 4.]]

[PY] Calculating intersections for js: (1, 2, 3)
[PY] First normal: [0.2763932  0.85065081 0.4472136 ]
[PY] Other normals: [array([-0.7236068 ,  0.52573111,  0.4472136 ]), array([-0.7236068 , -0.52573111,  0.4472136 ])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.2763932  0.85065081 0.4472136 ]
[PY] self.offset: 0.37
[PY] others normals: [array([-0.7236068 ,  0.52573111,  0.4472136 ]), array([-0.7236068 , -0.52573111,  0.4472136 ])]
[PY] others offsets: [0.47, 0.57]
[PY] First two intersections: [[ 4.47598667 -4.85038823  2.81488397]]
[PY] First two k_combos: [[-2. -5.  0.]]

[PY] Calculating intersections for js: (1, 2, 4)
[PY] First normal: [0.2763932  0.85065081 0.4472136 ]
[PY] Other normals: [array([-0.7236068 ,  0.52573111,  0.4472136 ]), array([ 0.2763932 , -0.85065081,  0.4472136 ])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.2763932  0.85065081 0.4472136 ]
[PY] self.offset: 0.37
[PY] others normals: [array([-0.7236068 ,  0.52573111,  0.4472136 ]), array([ 0.2763932 , -0.85065081,  0.4472136 ])]
[PY] others offsets: [0.47, 0.67]
[PY] First two intersections: [[ 4.67614195 -5.46640285  3.86291063]]
[PY] First two k_combos: [[-2. -5.  7.]]

[PY] Calculating intersections for js: (1, 2, 5)
[PY] First normal: [0.2763932  0.85065081 0.4472136 ]
[PY] Other normals: [array([-0.7236068 ,  0.52573111,  0.4472136 ]), array([0., 0., 1.])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.2763932  0.85065081 0.4472136 ]
[PY] self.offset: 0.37
[PY] others normals: [array([-0.7236068 ,  0.52573111,  0.4472136 ]), array([0., 0., 1.])]
[PY] others offsets: [0.47, 0.77]
[PY] First two intersections: [[ 4.84938061 -5.9995766   4.77      ]]
[PY] First two k_combos: [[-2. -5.  4.]]

[PY] Calculating intersections for js: (1, 3, 4)
[PY] First normal: [0.2763932  0.85065081 0.4472136 ]
[PY] Other normals: [array([-0.7236068 , -0.52573111,  0.4472136 ]), array([ 0.2763932 , -0.85065081,  0.4472136 ])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.2763932  0.85065081 0.4472136 ]
[PY] self.offset: 0.37
[PY] others normals: [array([-0.7236068 , -0.52573111,  0.4472136 ]), array([ 0.2763932 , -0.85065081,  0.4472136 ])]
[PY] others offsets: [0.57, 0.67]
[PY] First two intersections: [[ 5.32385805 -5.46640285  3.46260007]]
[PY] First two k_combos: [[-2.  0.  7.]]

[PY] Calculating intersections for js: (1, 3, 5)
[PY] First normal: [0.2763932  0.85065081 0.4472136 ]
[PY] Other normals: [array([-0.7236068 , -0.52573111,  0.4472136 ]), array([0., 0., 1.])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.2763932  0.85065081 0.4472136 ]
[PY] self.offset: 0.37
[PY] others normals: [array([-0.7236068 , -0.52573111,  0.4472136 ]), array([0., 0., 1.])]
[PY] others offsets: [0.57, 0.77]
[PY] First two intersections: [[ 7.03526678 -6.70981407  4.77      ]]
[PY] First two k_combos: [[-2.  0.  4.]]

[PY] Calculating intersections for js: (1, 4, 5)
[PY] First normal: [0.2763932  0.85065081 0.4472136 ]
[PY] Other normals: [array([ 0.2763932 , -0.85065081,  0.4472136 ]), array([0., 0., 1.])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [0.2763932  0.85065081 0.4472136 ]
[PY] self.offset: 0.37
[PY] others normals: [array([ 0.2763932 , -0.85065081,  0.4472136 ]), array([0., 0., 1.])]
[PY] others offsets: [0.67, 0.77]
[PY] First two intersections: [[ 3.20844052 -5.46640285  4.77      ]]
[PY] First two k_combos: [[-2.  7.  4.]]

[PY] Calculating intersections for js: (2, 3, 4)
[PY] First normal: [-0.7236068   0.52573111  0.4472136 ]
[PY] Other normals: [array([-0.7236068 , -0.52573111,  0.4472136 ]), array([ 0.2763932 , -0.85065081,  0.4472136 ])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [-0.7236068   0.52573111  0.4472136 ]
[PY] self.offset: 0.47
[PY] others normals: [array([-0.7236068 , -0.52573111,  0.4472136 ]), array([ 0.2763932 , -0.85065081,  0.4472136 ])]
[PY] others offsets: [0.57, 0.67]
[PY] First two intersections: [[ 5.52401333 -4.85038823  4.51062672]]
[PY] First two k_combos: [[-5.  0.  7.]]

[PY] Calculating intersections for js: (2, 3, 5)
[PY] First normal: [-0.7236068   0.52573111  0.4472136 ]
[PY] Other normals: [array([-0.7236068 , -0.52573111,  0.4472136 ]), array([0., 0., 1.])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [-0.7236068   0.52573111  0.4472136 ]
[PY] self.offset: 0.47
[PY] others normals: [array([-0.7236068 , -0.52573111,  0.4472136 ]), array([0., 0., 1.])]
[PY] others offsets: [0.57, 0.77]
[PY] First two intersections: [[ 5.68431483 -4.85038823  4.77      ]]
[PY] First two k_combos: [[-5.  0.  4.]]

[PY] Calculating intersections for js: (2, 4, 5)
[PY] First normal: [-0.7236068   0.52573111  0.4472136 ]
[PY] Other normals: [array([ 0.2763932 , -0.85065081,  0.4472136 ]), array([0., 0., 1.])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [-0.7236068   0.52573111  0.4472136 ]
[PY] self.offset: 0.47
[PY] others normals: [array([ 0.2763932 , -0.85065081,  0.4472136 ]), array([0., 0., 1.])]
[PY] others offsets: [0.67, 0.77]
[PY] First two intersections: [[ 5.86353735 -4.60370959  4.77      ]]
[PY] First two k_combos: [[-5.  7.  4.]]

[PY] Calculating intersections for js: (3, 4, 5)
[PY] First normal: [-0.7236068  -0.52573111  0.4472136 ]
[PY] Other normals: [array([ 0.2763932 , -0.85065081,  0.4472136 ]), array([0., 0., 1.])]

[PY] get_intersections_with details:
[PY] k_range: 0
[PY] self.normal: [-0.7236068  -0.52573111  0.4472136 ]
[PY] self.offset: 0.57
[PY] others normals: [array([ 0.2763932 , -0.85065081,  0.4472136 ]), array([0., 0., 1.])]
[PY] others offsets: [0.67, 0.77]
[PY] First two intersections: [[ 5.57354922 -4.69793245  4.77      ]]
[PY] First two k_combos: [[0. 7. 4.]]
[PY] Total cells found: 20
number of cells: 20
Cells found.
Pre-export cell vertices:
Cell 1:
  Vertex 0: [10.366563145999493, -10.284512835764028, 5.683281572999748]
  Vertex 1: [9.642956348249513, -10.810243947883162, 6.1304951684997055]
  Vertex 2: [10.642956348249516, -9.433862027411989, 6.1304951684997055]
  Vertex 3: [9.919349550499536, -9.959593139531123, 6.577708763999663]
  Vertex 4: [11.26099033699941, -10.284512835764028, 6.1304951684997055]
  Vertex 5: [10.53738353924943, -10.810243947883162, 6.577708763999663]
  Vertex 6: [11.53738353924943, -9.433862027411989, 6.577708763999663]
  Vertex 7: [10.813776741499453, -9.959593139531123, 7.024922359499621]
Cell 2:
  Vertex 0: [9.642956348249513, -10.810243947883162, 6.1304951684997055]
  Vertex 1: [9.919349550499533, -11.660894756235201, 6.577708763999663]
  Vertex 2: [9.919349550499536, -9.959593139531123, 6.577708763999663]
  Vertex 3: [10.195742752749556, -10.810243947883162, 7.024922359499621]
  Vertex 4: [10.53738353924943, -10.810243947883162, 6.577708763999663]
  Vertex 5: [10.813776741499451, -11.660894756235201, 7.024922359499621]
  Vertex 6: [10.813776741499453, -9.959593139531123, 7.024922359499621]
  Vertex 7: [11.090169943749473, -10.810243947883162, 7.47213595499958]
Triangulation analysis and adjustment for first cell (UUID: df743638-a083-46e4-83b7-ea8ea195dc80):
DONE :)
